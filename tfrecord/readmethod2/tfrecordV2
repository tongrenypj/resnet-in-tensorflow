#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import tensorflow as tf
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

cwd = os.getcwd()

classes = ['cat','dog']
#制作二进制数据
def create_record():
    writer = tf.python_io.TFRecordWriter("train.tfrecords")
    for index, label_name in enumerate(classes):

        class_path = cwd + os.sep + label_name + os.sep
        # class_path = os.path.join(cwd,label_name)

        for img_name in os.listdir(class_path):
            if(img_name.endswith('.jpg')):
                img_path = class_path + img_name
                img = Image.open(img_path)
                img = img.resize((64, 64))
                img_raw = img.tobytes() #将图片转化为原生bytes
                print (label_name,index,img_raw)
                example = tf.train.Example(
                   features=tf.train.Features(feature={
                        "label": tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),
                        'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img_raw]))
                   }))
                writer.write(example.SerializeToString())
    writer.close()

data = create_record()


#读取二进制数据
def read_and_decode(filename,num_epochs=None, shuffle=True):
    # 创建文件队列,不限读取的数量
    filename_queue = tf.train.string_input_producer(filename,num_epochs=num_epochs, shuffle=shuffle)
    # create a reader from file queue
    reader = tf.TFRecordReader()
    # reader从文件队列中读入一个序列化的样本
    _, serialized_example = reader.read(filename_queue)
    # get feature from serialized example
    # 解析符号化的样本
    features = tf.parse_single_example(
        serialized_example,
        features={
            'label': tf.FixedLenFeature([], tf.int64),
            'img_raw': tf.FixedLenFeature([], tf.string)
        }
    )
    label = features['label']
    img = features['img_raw']
    img = tf.decode_raw(img, tf.uint8)
    img = tf.reshape(img, [64, 64, 3])
    img = tf.cast(img, tf.float32) * (1. / 255) - 0.5
    label = tf.cast(label, tf.int32)
    return img,label

if __name__ == '__main__':
    if 0:
        data = create_record("train.tfrecords")
    else:
        with tf.Graph().as_default() as g:

            print(g)
            img, label = read_and_decode(['train.tfrecords1'], num_epochs=None, shuffle=False)

            print("tengxing", img, label)

            # tf.reset_default_graph()
            with tf.Session(graph=g) as sess:
                init = (tf.global_variables_initializer(), tf.local_variables_initializer())
                sess.run(init)
                # 启动队列，这个QueueRunner的工作线程是独立于文件阅读器的线程， 因此乱序和将文件名推入到文件名队列这些过程不会阻塞文件阅读器运行。
                # 你必须调用tf.train.start_queue_runners来将文件名填充到队列，否则read操作会被阻塞到文件名队列中有值为止。
                # coord = tf.train.Coordinator()
                threads = tf.train.start_queue_runners(sess)

                step = 15
                for i in range(step):
                    image_batch_v, label_batch_v  = sess.run([img, label])
                    print(image_batch_v.shape, label_batch_v)

                # coord.request_stop()
                # coord.join(threads)

